package week11;

import javax.swing.JFrame;

class ThreadGui1 extends Thread{
	public void run(){
		JFrame jf=new JFrame("GUI");
		jf.setBounds(400, 300, 300, 400);
		jf.setVisible(true);
		int count;
		count=Thread.activeCount();
		System.out.println("一共有"+count+"个线程在运行");
		Thread[] threads=new Thread[count];
		Thread t=Thread.currentThread();
		t.enumerate(threads);
		for (int i = 0; i < threads.length; i++) {
			System.out.println(threads[i].getName());
		}
	}
}

public class TestGUI {

	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ThreadGui1 t1=new ThreadGui1();
		t1.start();
	}

}




package week11;

import java.awt.Font;
import java.util.Calendar;
import java.util.GregorianCalendar;

import javax.swing.*;

public class TestSleep {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		CountTime c1=new CountTime();
		Thread t1=new Thread(c1);
		t1.start();
	}

}

class CountTime implements Runnable{
	JFrame jf;
	JLabel jlb;
	public CountTime(){
		jf=new JFrame("时钟");
		jf.setBounds(400, 300, 200, 100);
		jlb=new JLabel();
		jlb.setFont(new Font("宋体",1,26));
		jf.add(jlb);
		jf.setVisible(true);
		jf.setDefaultCloseOperation(jf.EXIT_ON_CLOSE);
	}
	public void run() {
		// TODO Auto-generated method stub
		while(true){
			Calendar calendar=new GregorianCalendar();
			String timeString=calendar.get(Calendar.HOUR)+":"+calendar.get(Calendar.MINUTE)+":"+calendar.get(Calendar.SECOND);
			jlb.setText(timeString);
		}
	}
}




package week11;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;


public class TestTimer {
	JLabel jlb;
	JButton start;
	JButton end;
	public TestTimer(){
		JFrame jf=new JFrame("秒表");
		jf.setBounds(400, 300, 200, 100);
		jlb=new JLabel("00:00:00");
		jf.add(jlb);
		JPanel p1=new JPanel();
		JPanel p2=new JPanel();
		start=new JButton("start");
		end=new JButton("end");
		p1.add(start);
		p1.add(end);
		jf.add(p1,"South");
		jf.setVisible(true);
		jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		myEvent();
	}

	private void myEvent() {
		// TODO Auto-generated method stub
		MyListener m1=new MyListener(jlb);
		start.addActionListener(m1);
		end.addActionListener(m1);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		new TestTimer();
	}
}
class MyListener implements ActionListener{
	JLabel jlb;
	TimerThread t1;
	public MyListener(JLabel j){
		jlb=j;
	}
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		String command=e.getActionCommand();
		int count=0;
		if(command.equals("start")){
			t1=new TimerThread(jlb);
			t1.start();
		}else if(command.equals("end")){
			//System.exit(0);
			//停止计数，停止计数的那个线程
			t1.setFlagFalse();//使循环标记为false
			//t1.interrupt();//中断线程
		}
	}	
}
class TimerThread extends Thread{
	JLabel jlb;
	boolean continueFlag=true;
	public TimerThread(JLabel j){
		jlb=j;
	}
	public void run(){
		//计时，计数
		int count=0;//计数器
		while(continueFlag){
			count++;
			jlb.setText(count+"");
			try {
				Thread.sleep(1000);//休眠一秒
				//wait();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	public void setFlagFalse(){
		continueFlag=false;
	}
}

package week12;
//盘子
class Panzi{
	String name;//菜名
	String content;//菜
	boolean isFull=false;//盘子的状态，空
}
//厨师做菜的线程
/*
 * 当盘子空了
 * 做饼，放盘子里
 * 盘子满了
 * 叫（唤醒）顾客吃
 * else
 * 盘子不空=满
 * 等待
 */
class Cook implements Runnable{
	Panzi panzi;
	public Cook(Panzi p1){
		panzi=p1;
	}
	public void run() {
		// TODO Auto-generated method stub
		boolean flag=true;
		while(true){
			synchronized(panzi){
				if(!panzi.isFull){
					cookCai(flag);
					flag=!flag;
					panzi.isFull=true;//盘子满
					//叫顾客吃
					panzi.notify();
				}else{
					try {
						panzi.wait();//盘子满，等待
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		}
	}
	private void cookCai(boolean flag) {
		// TODO Auto-generated method stub
		if(flag){
			panzi.name="红烧狮子头";
			panzi.content="肉";
		}else{
			panzi.name="pizza";
			panzi.content="cheese";
		}
	}
}
//顾客吃的线程
/*
 * 当盘子不空
 * 吃饼
 * 盘子空了
 * 叫厨师做饼
 * else 
 * 盘子空了
 * 等待
 */
class Eat implements Runnable{
	Panzi panzi;
	public Eat(Panzi p1){
		panzi=p1;
	}
	public void run() {
		// TODO Auto-generated method stub
		while(true){
			synchronized(panzi){
				if(panzi.isFull){
					System.out.println("eat--"+panzi.name+"---"+panzi.content);
					panzi.isFull=false;//盘子空
					panzi.notify();//唤醒和他使用同一把锁的厨师线程
				}else{
					try {
						panzi.wait();
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		}
	}
}
public class Testbbb {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Panzi panzi=new Panzi();//资源
		Cook cook=new Cook(panzi);
		Eat eat=new Eat(panzi);
		Thread t1=new Thread(cook);
		Thread t2=new Thread(eat);
		t1.start();
		t2.start();
	}
}


